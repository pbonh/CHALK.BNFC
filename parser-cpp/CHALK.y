/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <algorithm>
#include "ParserError.H"
#include "Absyn.H"

#define YYMAXDEPTH 10000000

typedef struct yy_buffer_state *YY_BUFFER_STATE;
int yyparse(void);
int yylex(void);
YY_BUFFER_STATE CHALKFrontendyy_scan_string(const char *str);
void CHALKFrontendyy_delete_buffer(YY_BUFFER_STATE buf);
int CHALKFrontendyy_mylinenumber;
void CHALKFrontendinitialize_lexer(FILE * inp);
int CHALKFrontendyywrap(void)
{
  return 1;
}
void CHALKFrontendyyerror(const char *str)
{
  throw CHALKFrontend::parse_error(CHALKFrontendyy_mylinenumber,str);
}

namespace CHALKFrontend
{

static Cell* YY_RESULT_Cell_ = 0;
static ListCellData* YY_RESULT_ListCellData_ = 0;
static CellData* YY_RESULT_CellData_ = 0;
static CBLOCK* YY_RESULT_CBLOCK_ = 0;
static PAD* YY_RESULT_PAD_ = 0;
static PROPERTY* YY_RESULT_PROPERTY_ = 0;
static XYRELATIVE* YY_RESULT_XYRELATIVE_ = 0;
static XYABSOLUTE* YY_RESULT_XYABSOLUTE_ = 0;
static Element* YY_RESULT_Element_ = 0;
static PLACEMENT* YY_RESULT_PLACEMENT_ = 0;
static TEXT* YY_RESULT_TEXT_ = 0;
static XELEMENT* YY_RESULT_XELEMENT_ = 0;
static Geometry* YY_RESULT_Geometry_ = 0;
static POLYGON* YY_RESULT_POLYGON_ = 0;
static PATH* YY_RESULT_PATH_ = 0;
static TRAPEZOID* YY_RESULT_TRAPEZOID_ = 0;
static CTRAPEZOID* YY_RESULT_CTRAPEZOID_ = 0;
static CIRCLE* YY_RESULT_CIRCLE_ = 0;
static XGEOMETRY* YY_RESULT_XGEOMETRY_ = 0;
static RECTANGLE* YY_RESULT_RECTANGLE_ = 0;
static RectangleInfoByte* YY_RESULT_RectangleInfoByte_ = 0;
static LayerData* YY_RESULT_LayerData_ = 0;
static ListLayerNumber* YY_RESULT_ListLayerNumber_ = 0;
static LayerNumber* YY_RESULT_LayerNumber_ = 0;
static ListDataTypeNumber* YY_RESULT_ListDataTypeNumber_ = 0;
static DataTypeNumber* YY_RESULT_DataTypeNumber_ = 0;
static ListWidth* YY_RESULT_ListWidth_ = 0;
static ListHeight* YY_RESULT_ListHeight_ = 0;
static ListXCoord* YY_RESULT_ListXCoord_ = 0;
static ListYCoord* YY_RESULT_ListYCoord_ = 0;
static ListRepetition* YY_RESULT_ListRepetition_ = 0;
static Width* YY_RESULT_Width_ = 0;
static Height* YY_RESULT_Height_ = 0;
static XCoord* YY_RESULT_XCoord_ = 0;
static YCoord* YY_RESULT_YCoord_ = 0;
static Repetition* YY_RESULT_Repetition_ = 0;
static Int* YY_RESULT_Int_ = 0;

Cell* pCell(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Cell_;
  }
}
Cell* pCell(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Cell_;
  }
}

ListCellData* pListCellData(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListCellData_;
  }
}
ListCellData* pListCellData(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListCellData_;
  }
}

CellData* pCellData(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_CellData_;
  }
}
CellData* pCellData(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_CellData_;
  }
}

CBLOCK* pCBLOCK(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_CBLOCK_;
  }
}
CBLOCK* pCBLOCK(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_CBLOCK_;
  }
}

PAD* pPAD(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PAD_;
  }
}
PAD* pPAD(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PAD_;
  }
}

PROPERTY* pPROPERTY(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PROPERTY_;
  }
}
PROPERTY* pPROPERTY(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PROPERTY_;
  }
}

XYRELATIVE* pXYRELATIVE(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_XYRELATIVE_;
  }
}
XYRELATIVE* pXYRELATIVE(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_XYRELATIVE_;
  }
}

XYABSOLUTE* pXYABSOLUTE(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_XYABSOLUTE_;
  }
}
XYABSOLUTE* pXYABSOLUTE(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_XYABSOLUTE_;
  }
}

Element* pElement(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Element_;
  }
}
Element* pElement(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Element_;
  }
}

PLACEMENT* pPLACEMENT(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PLACEMENT_;
  }
}
PLACEMENT* pPLACEMENT(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PLACEMENT_;
  }
}

TEXT* pTEXT(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_TEXT_;
  }
}
TEXT* pTEXT(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_TEXT_;
  }
}

XELEMENT* pXELEMENT(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_XELEMENT_;
  }
}
XELEMENT* pXELEMENT(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_XELEMENT_;
  }
}

Geometry* pGeometry(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Geometry_;
  }
}
Geometry* pGeometry(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Geometry_;
  }
}

POLYGON* pPOLYGON(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_POLYGON_;
  }
}
POLYGON* pPOLYGON(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_POLYGON_;
  }
}

PATH* pPATH(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PATH_;
  }
}
PATH* pPATH(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PATH_;
  }
}

TRAPEZOID* pTRAPEZOID(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_TRAPEZOID_;
  }
}
TRAPEZOID* pTRAPEZOID(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_TRAPEZOID_;
  }
}

CTRAPEZOID* pCTRAPEZOID(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_CTRAPEZOID_;
  }
}
CTRAPEZOID* pCTRAPEZOID(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_CTRAPEZOID_;
  }
}

CIRCLE* pCIRCLE(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_CIRCLE_;
  }
}
CIRCLE* pCIRCLE(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_CIRCLE_;
  }
}

XGEOMETRY* pXGEOMETRY(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_XGEOMETRY_;
  }
}
XGEOMETRY* pXGEOMETRY(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_XGEOMETRY_;
  }
}

RECTANGLE* pRECTANGLE(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_RECTANGLE_;
  }
}
RECTANGLE* pRECTANGLE(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_RECTANGLE_;
  }
}

RectangleInfoByte* pRectangleInfoByte(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_RectangleInfoByte_;
  }
}
RectangleInfoByte* pRectangleInfoByte(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_RectangleInfoByte_;
  }
}

LayerData* pLayerData(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LayerData_;
  }
}
LayerData* pLayerData(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LayerData_;
  }
}

ListLayerNumber* pListLayerNumber(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(YY_RESULT_ListLayerNumber_->begin(), YY_RESULT_ListLayerNumber_->end());
    return YY_RESULT_ListLayerNumber_;
  }
}
ListLayerNumber* pListLayerNumber(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(YY_RESULT_ListLayerNumber_->begin(), YY_RESULT_ListLayerNumber_->end());
    return YY_RESULT_ListLayerNumber_;
  }
}

LayerNumber* pLayerNumber(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LayerNumber_;
  }
}
LayerNumber* pLayerNumber(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LayerNumber_;
  }
}

ListDataTypeNumber* pListDataTypeNumber(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(YY_RESULT_ListDataTypeNumber_->begin(), YY_RESULT_ListDataTypeNumber_->end());
    return YY_RESULT_ListDataTypeNumber_;
  }
}
ListDataTypeNumber* pListDataTypeNumber(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(YY_RESULT_ListDataTypeNumber_->begin(), YY_RESULT_ListDataTypeNumber_->end());
    return YY_RESULT_ListDataTypeNumber_;
  }
}

DataTypeNumber* pDataTypeNumber(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_DataTypeNumber_;
  }
}
DataTypeNumber* pDataTypeNumber(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_DataTypeNumber_;
  }
}

ListWidth* pListWidth(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(YY_RESULT_ListWidth_->begin(), YY_RESULT_ListWidth_->end());
    return YY_RESULT_ListWidth_;
  }
}
ListWidth* pListWidth(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(YY_RESULT_ListWidth_->begin(), YY_RESULT_ListWidth_->end());
    return YY_RESULT_ListWidth_;
  }
}

ListHeight* pListHeight(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(YY_RESULT_ListHeight_->begin(), YY_RESULT_ListHeight_->end());
    return YY_RESULT_ListHeight_;
  }
}
ListHeight* pListHeight(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(YY_RESULT_ListHeight_->begin(), YY_RESULT_ListHeight_->end());
    return YY_RESULT_ListHeight_;
  }
}

ListXCoord* pListXCoord(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(YY_RESULT_ListXCoord_->begin(), YY_RESULT_ListXCoord_->end());
    return YY_RESULT_ListXCoord_;
  }
}
ListXCoord* pListXCoord(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(YY_RESULT_ListXCoord_->begin(), YY_RESULT_ListXCoord_->end());
    return YY_RESULT_ListXCoord_;
  }
}

ListYCoord* pListYCoord(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(YY_RESULT_ListYCoord_->begin(), YY_RESULT_ListYCoord_->end());
    return YY_RESULT_ListYCoord_;
  }
}
ListYCoord* pListYCoord(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(YY_RESULT_ListYCoord_->begin(), YY_RESULT_ListYCoord_->end());
    return YY_RESULT_ListYCoord_;
  }
}

ListRepetition* pListRepetition(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(YY_RESULT_ListRepetition_->begin(), YY_RESULT_ListRepetition_->end());
    return YY_RESULT_ListRepetition_;
  }
}
ListRepetition* pListRepetition(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(YY_RESULT_ListRepetition_->begin(), YY_RESULT_ListRepetition_->end());
    return YY_RESULT_ListRepetition_;
  }
}

Width* pWidth(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Width_;
  }
}
Width* pWidth(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Width_;
  }
}

Height* pHeight(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Height_;
  }
}
Height* pHeight(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Height_;
  }
}

XCoord* pXCoord(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_XCoord_;
  }
}
XCoord* pXCoord(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_XCoord_;
  }
}

YCoord* pYCoord(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_YCoord_;
  }
}
YCoord* pYCoord(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_YCoord_;
  }
}

Repetition* pRepetition(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Repetition_;
  }
}
Repetition* pRepetition(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Repetition_;
  }
}

Int* pInt(FILE *inp)
{
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Int_;
  }
}
Int* pInt(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  CHALKFrontendyy_mylinenumber = 1;
  CHALKFrontendinitialize_lexer(0);
  buf = CHALKFrontendyy_scan_string(str);
  result = yyparse();
  CHALKFrontendyy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Int_;
  }
}


}
%}

%union
{
  int    _int;
  char   _char;
  double _double;
  char*  _string;
  CHALKFrontend::Cell* cell_;
  CHALKFrontend::ListCellData* listcelldata_;
  CHALKFrontend::CellData* celldata_;
  CHALKFrontend::CBLOCK* cblock_;
  CHALKFrontend::PAD* pad_;
  CHALKFrontend::PROPERTY* property_;
  CHALKFrontend::XYRELATIVE* xyrelative_;
  CHALKFrontend::XYABSOLUTE* xyabsolute_;
  CHALKFrontend::Element* element_;
  CHALKFrontend::PLACEMENT* placement_;
  CHALKFrontend::TEXT* text_;
  CHALKFrontend::XELEMENT* xelement_;
  CHALKFrontend::Geometry* geometry_;
  CHALKFrontend::POLYGON* polygon_;
  CHALKFrontend::PATH* path_;
  CHALKFrontend::TRAPEZOID* trapezoid_;
  CHALKFrontend::CTRAPEZOID* ctrapezoid_;
  CHALKFrontend::CIRCLE* circle_;
  CHALKFrontend::XGEOMETRY* xgeometry_;
  CHALKFrontend::RECTANGLE* rectangle_;
  CHALKFrontend::RectangleInfoByte* rectangleinfobyte_;
  CHALKFrontend::LayerData* layerdata_;
  CHALKFrontend::ListLayerNumber* listlayernumber_;
  CHALKFrontend::LayerNumber* layernumber_;
  CHALKFrontend::ListDataTypeNumber* listdatatypenumber_;
  CHALKFrontend::DataTypeNumber* datatypenumber_;
  CHALKFrontend::ListWidth* listwidth_;
  CHALKFrontend::ListHeight* listheight_;
  CHALKFrontend::ListXCoord* listxcoord_;
  CHALKFrontend::ListYCoord* listycoord_;
  CHALKFrontend::ListRepetition* listrepetition_;
  CHALKFrontend::Width* width_;
  CHALKFrontend::Height* height_;
  CHALKFrontend::XCoord* xcoord_;
  CHALKFrontend::YCoord* ycoord_;
  CHALKFrontend::Repetition* repetition_;
  CHALKFrontend::Int* int_;
}
%define api.prefix {CHALKFrontendyy}
%token _ERROR_
%token _SYMB_0    //   20
%token _SYMB_1    //   CBLOCK
%token _SYMB_2    //   CELL
%token _SYMB_3    //   CIRCLE
%token _SYMB_4    //   CTRAPEZOID
%token _SYMB_5    //   PAD
%token _SYMB_6    //   PATH
%token _SYMB_7    //   PLACEMENT
%token _SYMB_8    //   POLYGON
%token _SYMB_9    //   PROPERTY
%token _SYMB_10    //   Repetition
%token _SYMB_11    //   TEXT
%token _SYMB_12    //   TRAPEZOID
%token _SYMB_13    //   XELEMENT
%token _SYMB_14    //   XGEOMETRY
%token _SYMB_15    //   XYABSOLUTE
%token _SYMB_16    //   XYRELATIVE

%type <cell_> Cell
%type <listcelldata_> ListCellData
%type <celldata_> CellData
%type <cblock_> CBLOCK
%type <pad_> PAD
%type <property_> PROPERTY
%type <xyrelative_> XYRELATIVE
%type <xyabsolute_> XYABSOLUTE
%type <element_> Element
%type <placement_> PLACEMENT
%type <text_> TEXT
%type <xelement_> XELEMENT
%type <geometry_> Geometry
%type <polygon_> POLYGON
%type <path_> PATH
%type <trapezoid_> TRAPEZOID
%type <ctrapezoid_> CTRAPEZOID
%type <circle_> CIRCLE
%type <xgeometry_> XGEOMETRY
%type <rectangle_> RECTANGLE
%type <rectangleinfobyte_> RectangleInfoByte
%type <layerdata_> LayerData
%type <listlayernumber_> ListLayerNumber
%type <layernumber_> LayerNumber
%type <listdatatypenumber_> ListDataTypeNumber
%type <datatypenumber_> DataTypeNumber
%type <listwidth_> ListWidth
%type <listheight_> ListHeight
%type <listxcoord_> ListXCoord
%type <listycoord_> ListYCoord
%type <listrepetition_> ListRepetition
%type <width_> Width
%type <height_> Height
%type <xcoord_> XCoord
%type <ycoord_> YCoord
%type <repetition_> Repetition
%type <int_> Int

%start Cell
%token<_int>    _INTEGER_

%%
Cell : _SYMB_2 ListCellData {  $$ = new CHALKFrontend::ECell($2); CHALKFrontend::YY_RESULT_Cell_= $$; }
;
ListCellData : /* empty */ {  $$ = new CHALKFrontend::ListCellData(); CHALKFrontend::YY_RESULT_ListCellData_= $$; }
  | ListCellData CellData {  $1->push_back($2) ; $$ = $1 ; CHALKFrontend::YY_RESULT_ListCellData_= $$; }
;
CellData : CBLOCK {  $$ = new CHALKFrontend::CellDataCBLOCK($1); CHALKFrontend::YY_RESULT_CellData_= $$; }
  | PAD {  $$ = new CHALKFrontend::CellDataPAD($1); CHALKFrontend::YY_RESULT_CellData_= $$; }
  | PROPERTY {  $$ = new CHALKFrontend::CellDataPROPERTY($1); CHALKFrontend::YY_RESULT_CellData_= $$; }
  | XYRELATIVE {  $$ = new CHALKFrontend::CellDataXYRELATIVE($1); CHALKFrontend::YY_RESULT_CellData_= $$; }
  | XYABSOLUTE {  $$ = new CHALKFrontend::CellDataXYABSOLUTE($1); CHALKFrontend::YY_RESULT_CellData_= $$; }
  | Element {  $$ = new CHALKFrontend::CellDataElement($1); CHALKFrontend::YY_RESULT_CellData_= $$; }
;
CBLOCK : _SYMB_1 {  $$ = new CHALKFrontend::ECBLOCK(); CHALKFrontend::YY_RESULT_CBLOCK_= $$; }
;
PAD : _SYMB_5 {  $$ = new CHALKFrontend::EPAD(); CHALKFrontend::YY_RESULT_PAD_= $$; }
;
PROPERTY : _SYMB_9 {  $$ = new CHALKFrontend::EPROPERTY(); CHALKFrontend::YY_RESULT_PROPERTY_= $$; }
;
XYRELATIVE : _SYMB_16 {  $$ = new CHALKFrontend::EXYRELATIVE(); CHALKFrontend::YY_RESULT_XYRELATIVE_= $$; }
;
XYABSOLUTE : _SYMB_15 {  $$ = new CHALKFrontend::EXYABSOLUTE(); CHALKFrontend::YY_RESULT_XYABSOLUTE_= $$; }
;
Element : Geometry {  $$ = new CHALKFrontend::ElementGeometry($1); CHALKFrontend::YY_RESULT_Element_= $$; }
  | PLACEMENT {  $$ = new CHALKFrontend::ElementPLACEMENT($1); CHALKFrontend::YY_RESULT_Element_= $$; }
  | TEXT {  $$ = new CHALKFrontend::ElementTEXT($1); CHALKFrontend::YY_RESULT_Element_= $$; }
  | XELEMENT {  $$ = new CHALKFrontend::ElementXELEMENT($1); CHALKFrontend::YY_RESULT_Element_= $$; }
;
PLACEMENT : _SYMB_7 {  $$ = new CHALKFrontend::EPLACEMENT(); CHALKFrontend::YY_RESULT_PLACEMENT_= $$; }
;
TEXT : _SYMB_11 {  $$ = new CHALKFrontend::ETEXT(); CHALKFrontend::YY_RESULT_TEXT_= $$; }
;
XELEMENT : _SYMB_13 {  $$ = new CHALKFrontend::EXELEMENT(); CHALKFrontend::YY_RESULT_XELEMENT_= $$; }
;
Geometry : RECTANGLE {  $$ = new CHALKFrontend::GeometryRECTANGLE($1); CHALKFrontend::YY_RESULT_Geometry_= $$; }
  | POLYGON {  $$ = new CHALKFrontend::GeometryPOLYGON($1); CHALKFrontend::YY_RESULT_Geometry_= $$; }
  | PATH {  $$ = new CHALKFrontend::GeometryPATH($1); CHALKFrontend::YY_RESULT_Geometry_= $$; }
  | TRAPEZOID {  $$ = new CHALKFrontend::GeometryTRAPEZOID($1); CHALKFrontend::YY_RESULT_Geometry_= $$; }
  | CTRAPEZOID {  $$ = new CHALKFrontend::GeometryCTRAPEZOID($1); CHALKFrontend::YY_RESULT_Geometry_= $$; }
  | CIRCLE {  $$ = new CHALKFrontend::GeometryCIRCLE($1); CHALKFrontend::YY_RESULT_Geometry_= $$; }
  | XGEOMETRY {  $$ = new CHALKFrontend::GeometryXGEOMETRY($1); CHALKFrontend::YY_RESULT_Geometry_= $$; }
;
POLYGON : _SYMB_8 {  $$ = new CHALKFrontend::EPOLYGON(); CHALKFrontend::YY_RESULT_POLYGON_= $$; }
;
PATH : _SYMB_6 {  $$ = new CHALKFrontend::EPATH(); CHALKFrontend::YY_RESULT_PATH_= $$; }
;
TRAPEZOID : _SYMB_12 {  $$ = new CHALKFrontend::ETRAPEZOID(); CHALKFrontend::YY_RESULT_TRAPEZOID_= $$; }
;
CTRAPEZOID : _SYMB_4 {  $$ = new CHALKFrontend::ECTRAPEZOID(); CHALKFrontend::YY_RESULT_CTRAPEZOID_= $$; }
;
CIRCLE : _SYMB_3 {  $$ = new CHALKFrontend::ECIRCLE(); CHALKFrontend::YY_RESULT_CIRCLE_= $$; }
;
XGEOMETRY : _SYMB_14 {  $$ = new CHALKFrontend::EXGEOMETRY(); CHALKFrontend::YY_RESULT_XGEOMETRY_= $$; }
;
RECTANGLE : _SYMB_0 RectangleInfoByte LayerData ListWidth ListHeight ListXCoord ListYCoord ListRepetition {  std::reverse($4->begin(),$4->end()) ; std::reverse($5->begin(),$5->end()) ; std::reverse($6->begin(),$6->end()) ; std::reverse($7->begin(),$7->end()) ; std::reverse($8->begin(),$8->end()) ;$$ = new CHALKFrontend::ERECTANGLE($2, $3, $4, $5, $6, $7, $8); CHALKFrontend::YY_RESULT_RECTANGLE_= $$; }
;
RectangleInfoByte : Int {  $$ = new CHALKFrontend::ERectangleInfoByte($1); CHALKFrontend::YY_RESULT_RectangleInfoByte_= $$; }
;
LayerData : LayerNumber DataTypeNumber {  $$ = new CHALKFrontend::ELayerData($1, $2); CHALKFrontend::YY_RESULT_LayerData_= $$; }
;
ListLayerNumber : /* empty */ {  $$ = new CHALKFrontend::ListLayerNumber(); CHALKFrontend::YY_RESULT_ListLayerNumber_= $$; }
  | LayerNumber {  $$ = new CHALKFrontend::ListLayerNumber() ; $$->push_back($1); CHALKFrontend::YY_RESULT_ListLayerNumber_= $$; }
;
LayerNumber : Int {  $$ = new CHALKFrontend::ELayerNumber($1); CHALKFrontend::YY_RESULT_LayerNumber_= $$; }
;
ListDataTypeNumber : /* empty */ {  $$ = new CHALKFrontend::ListDataTypeNumber(); CHALKFrontend::YY_RESULT_ListDataTypeNumber_= $$; }
  | DataTypeNumber {  $$ = new CHALKFrontend::ListDataTypeNumber() ; $$->push_back($1); CHALKFrontend::YY_RESULT_ListDataTypeNumber_= $$; }
;
DataTypeNumber : Int {  $$ = new CHALKFrontend::EDataTypeNumber($1); CHALKFrontend::YY_RESULT_DataTypeNumber_= $$; }
;
ListWidth : /* empty */ {  $$ = new CHALKFrontend::ListWidth(); CHALKFrontend::YY_RESULT_ListWidth_= $$; }
  | Width {  $$ = new CHALKFrontend::ListWidth() ; $$->push_back($1); CHALKFrontend::YY_RESULT_ListWidth_= $$; }
;
ListHeight : /* empty */ {  $$ = new CHALKFrontend::ListHeight(); CHALKFrontend::YY_RESULT_ListHeight_= $$; }
  | Height {  $$ = new CHALKFrontend::ListHeight() ; $$->push_back($1); CHALKFrontend::YY_RESULT_ListHeight_= $$; }
;
ListXCoord : /* empty */ {  $$ = new CHALKFrontend::ListXCoord(); CHALKFrontend::YY_RESULT_ListXCoord_= $$; }
  | XCoord {  $$ = new CHALKFrontend::ListXCoord() ; $$->push_back($1); CHALKFrontend::YY_RESULT_ListXCoord_= $$; }
;
ListYCoord : /* empty */ {  $$ = new CHALKFrontend::ListYCoord(); CHALKFrontend::YY_RESULT_ListYCoord_= $$; }
  | YCoord {  $$ = new CHALKFrontend::ListYCoord() ; $$->push_back($1); CHALKFrontend::YY_RESULT_ListYCoord_= $$; }
  | /* empty */ {  $$ = new CHALKFrontend::ListYCoord(); CHALKFrontend::YY_RESULT_ListYCoord_= $$; }
  | YCoord {  $$ = new CHALKFrontend::ListYCoord() ; $$->push_back($1); CHALKFrontend::YY_RESULT_ListYCoord_= $$; }
;
ListRepetition : /* empty */ {  $$ = new CHALKFrontend::ListRepetition(); CHALKFrontend::YY_RESULT_ListRepetition_= $$; }
  | Repetition {  $$ = new CHALKFrontend::ListRepetition() ; $$->push_back($1); CHALKFrontend::YY_RESULT_ListRepetition_= $$; }
;
Width : Int {  $$ = new CHALKFrontend::EWidth($1); CHALKFrontend::YY_RESULT_Width_= $$; }
;
Height : Int {  $$ = new CHALKFrontend::EHeight($1); CHALKFrontend::YY_RESULT_Height_= $$; }
;
XCoord : Int {  $$ = new CHALKFrontend::EXCoord($1); CHALKFrontend::YY_RESULT_XCoord_= $$; }
;
YCoord : Int {  $$ = new CHALKFrontend::EYCoord($1); CHALKFrontend::YY_RESULT_YCoord_= $$; }
;
Repetition : _SYMB_10 {  $$ = new CHALKFrontend::ERepetition(); CHALKFrontend::YY_RESULT_Repetition_= $$; }
;
Int : _INTEGER_ {  $$ = new CHALKFrontend::EInt($1); CHALKFrontend::YY_RESULT_Int_= $$; }
;

